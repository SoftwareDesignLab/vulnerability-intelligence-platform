package edu.rit.se.nvip.patchfinder.bugfinder;

import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.diff.DiffEntry;
import org.eclipse.jgit.diff.DiffFormatter;
import org.eclipse.jgit.diff.RawTextComparator;
import org.eclipse.jgit.errors.MissingObjectException;
import org.eclipse.jgit.lib.Constants;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectLoader;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevTree;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.treewalk.TreeWalk;
import org.eclipse.jgit.treewalk.filter.PathFilter;

import java.io.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.eclipse.jgit.util.io.DisabledOutputStream;

public class BugFinder {

    private static final Logger logger = LogManager.getLogger(BugFinder.class.getName());
    private Repository localRepo;
    private String projectName;
    private String localOutput;

    public BugFinder(Repository localRepo, String localOutput, String projectName) {
        this.localRepo = localRepo;
        this.projectName = projectName;
        this.localOutput = localOutput;
    }


    /**
     * Creates Commit files for every CVE including a patch within the output
     * directory
     *
     * @param cveTag
     * @param commit
     * @throws MissingObjectException
     * @throws IOException
     * @throws GitAPIException
     */
    private ArrayList<String> saveCommitFiles(String cveTag, String commitState, RevCommit commit) {

        logger.info("Saving commit files for: " + cveTag);
        ArrayList<String> commitFilePaths = new ArrayList<>();
        RevTree tree = commit.getTree();
        TreeWalk extractObjectTree;
        // now try to find a specific file
        try (TreeWalk treeWalk = new TreeWalk(localRepo)) {

            treeWalk.addTree(tree);
            treeWalk.setRecursive(true);
            List<String> filesToSave = getFilesPathsByCommit(commit);

            // Loop through all commit files and re-write them in CVE_Patches directory
            // Within the selected output dir
            for (String path : filesToSave) {

                treeWalk.setFilter(PathFilter.create(path));
                Path p = Paths.get(path);
                String fileName = p.getFileName().toString();

                if (!treeWalk.next()) {
                    System.out.println("Did not find expected file");
                    break;
                }

                extractObjectTree = treeWalk;
                ObjectId objectId = extractObjectTree.getObjectId(0);
                ObjectLoader loader = localRepo.open(objectId);

                ByteArrayOutputStream os = new ByteArrayOutputStream();
                loader.copyTo(os);

                // Folder in which the Patch commit and diff is stored
                File cveFolder = new File(localOutput + File.separator + projectName);
                cveFolder.mkdir();

                // CVE_Patches folder for all commit files
                File cvePatches = new File(cveFolder.getAbsolutePath() + File.separator + "CVE_Patches");
                cvePatches.mkdir();

                // Folder for specific CVE
                File dir = new File(cvePatches.getAbsolutePath() + File.separator + cveTag);
                dir.mkdir();

                // Folder for specific CVE
                File loc = new File(dir.getAbsolutePath() + File.separator + commitState);
                loc.mkdir();

                File commitFile = new File(loc.getAbsolutePath() + File.separator + fileName);

                // Write commit contents
                try (OutputStream outputStream = new FileOutputStream(
                        commitFile.getAbsolutePath())) {
                    os.writeTo(outputStream);
                }

                Path commitFilePath = Paths.get(commitFile.getAbsolutePath());
                Charset charset = StandardCharsets.UTF_8;

                String commitContent = Files.readString(commitFilePath, charset);
                commitContent = commitContent.replaceAll(",", "COMMA");
                commitContent = commitContent.replaceAll("\n", "\\N");

                Files.write(commitFilePath, commitContent.getBytes(charset));

                commitFilePaths.add(commitFile.getAbsolutePath());
            }

        } catch (Exception e) {
            logger.error(e.toString());
        }

        logger.info("Commit files saved");
        return commitFilePaths;

    }


    /**
     * Obtains a files paths for a specific commit
     *
     * @param commit
     * @return
     * @throws IOException
     * @throws MissingObjectException
     * @throws GitAPIException
     */
    private List<String> getFilesPathsByCommit(RevCommit commit) throws IOException, MissingObjectException {

        List<String> paths = new ArrayList();

        RevWalk rw = new RevWalk(localRepo);
        ObjectId head = localRepo.resolve(Constants.HEAD);
        RevCommit parent = rw.parseCommit(commit.getParent(0).getId());
        DiffFormatter df = new DiffFormatter(DisabledOutputStream.INSTANCE);

        df.setRepository(localRepo);
        df.setDiffComparator(RawTextComparator.DEFAULT);
        df.setDetectRenames(true);

        List<DiffEntry> diffs = df.scan(parent.getTree(), commit.getTree());

        for (DiffEntry diff : diffs) {
            paths.add(diff.getNewPath());
        }
        return paths;
    }

}
