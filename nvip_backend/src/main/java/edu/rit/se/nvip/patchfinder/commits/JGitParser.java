package edu.rit.se.nvip.patchfinder.commits;

import java.io.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.diff.DiffEntry;
import org.eclipse.jgit.diff.DiffFormatter;
import org.eclipse.jgit.diff.RawTextComparator;
import org.eclipse.jgit.errors.MissingObjectException;
import org.eclipse.jgit.internal.storage.file.FileRepository;
import org.eclipse.jgit.internal.storage.file.WindowCache;
import org.eclipse.jgit.lib.*;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevTree;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.storage.file.WindowCacheConfig;
import org.eclipse.jgit.treewalk.AbstractTreeIterator;
import org.eclipse.jgit.treewalk.CanonicalTreeParser;
import org.eclipse.jgit.treewalk.TreeWalk;
import org.eclipse.jgit.treewalk.filter.PathFilter;
import org.eclipse.jgit.util.FileUtils;
import org.eclipse.jgit.util.io.DisabledOutputStream;

/**
 * Author: Fawaz Alhenaki Edited by: Andrew Pickard (As of 10/19/2021)
 */
public class JGitParser {

	private static final Logger logger = LogManager.getLogger(JGitParser.class.getName());

	private static final String REGEX_VULN = "vulnerability|Vulnerability|vuln|Vuln|VULN[ #]*([0-9]+)";
	private static final String REGEX_CVE = "CVE";
	private static final String REGEX_CVE_ID = "(CVE-+[0-9]+[-]+[0-9]+)";
	private static final String REGEX_BUG = "bug|BUG|Bug[ #]*([0-9]+)";
	private static final Pattern PATTERN_VULN = Pattern.compile(REGEX_VULN);
	private static final Pattern PATTERN_CVES = Pattern.compile(REGEX_CVE);
	private static final Pattern PATTERN_CVE_ID = Pattern.compile(REGEX_CVE_ID);
	private Repository localRepo;
	private Git git;
	private List<JGithubCommit> fixCommits;

	private String localDownloadLoc;
	private String remoteLoc;
	private String localOutput;
	private String projectName;
	private String cveId;
	private String description;

	public JGitParser(String remoteLoc, String localDownloadLoc, String localOutput, String cveId, String description) {
		this.fixCommits = new ArrayList<>();
		this.localDownloadLoc = localDownloadLoc;
		try {
			String fileName = remoteLoc.substring(remoteLoc.lastIndexOf('/') + 1);
			this.projectName = fileName.substring(0, fileName.lastIndexOf('.'));
			this.localRepo = new FileRepository(localDownloadLoc + File.separator + projectName + "/.git");
		} catch (IOException e) {
			e.getMessage();
		}

		assert this.localRepo != null;
		this.git = new Git(this.localRepo);
		this.remoteLoc = remoteLoc;
		this.localOutput = localOutput;
		this.cveId = cveId;
		this.description = description.replaceAll(",", "COMMA").replaceAll("\n", "\\N").trim();
	}

	/**
	 * This function clones a repo parms: RemoteLocation. Format:
	 * https://github.com/user/example.git return: Git object of cloned repo
	 */
	public void cloneRepository() {
		try {
			logger.info("Cloning Repo to " + localDownloadLoc + File.separator + projectName + "...");
			git = Git.cloneRepository().setURI(remoteLoc)
					.setDirectory(new File(localDownloadLoc + File.separator + projectName))
					.setProgressMonitor(new ProgressMonitor() {

						private int total_completed;

						@Override
						public void start(int totalTasks) {
							total_completed = 0;
							logger.info("------- Starting work on " + totalTasks + " tasks");
						}

						@Override
						public void beginTask(String title, int totalWork) {
							total_completed = 0;
							logger.info("------- Start " + title + ": " + totalWork);
						}

						@Override
						public void update(int completed) {
							total_completed += completed;
							if (total_completed % 100000 == 0)
								logger.info("------- " + total_completed);
						}

						@Override
						public void endTask() {
							logger.info("------- Done");
						}

						@Override
						public boolean isCancelled() {
							return false;
						}
					}).call();

			logger.info("Repo " + projectName + " successfully cloned!");
		} catch (Exception e) {
			logger.info(e.getMessage());
		}
	}

	/**
	 * Deletes repository from storage (used after patch data is pulled)
	 */
	public void deleteRepository() {
		logger.info("Deleting Repo...");
		try {
			WindowCacheConfig config = new WindowCacheConfig();
			config.setPackedGitMMAP(true);
			WindowCache.reconfigure(config);

			File dir = new File(localDownloadLoc + File.separator + projectName);
			this.git.close();

			FileUtils.delete(dir, 1);

			logger.info("Repo " + projectName + " deleted successfully!");
		} catch (IOException e) {
			logger.info(e.getMessage());
		}
	}

	/**
	 * Collects all commits from a repo and returns them in a list
	 * 
	 * @return
	 */
	private List<RevCommit> getAllCommitList() {
		List<RevCommit> revCommits = new ArrayList<>();
		try {
			for (RevCommit rev : git.log().call()) {
				revCommits.add(rev);
			}
			return revCommits;
		} catch (GitAPIException e) {
			e.getMessage();
			logger.info(e.toString());
		}
		return null;
	}

	/**
	 * Parse commits to prepare for extraction of patches for a repo Uses preset
	 * Regex to find commits related to CVEs or bugs for patches
	 * 
	 * @throws IOException
	 * @throws GitAPIException
	 * @return
	 */
	public Map<Date, ArrayList<String>> parseCommits() throws GitAPIException, IOException {
		logger.info("Parsing Commits...");

		List<RevCommit> allCommits = this.getAllCommitList();

		if (allCommits != null) {

			for (RevCommit repoCommit : allCommits) {

				String message = repoCommit.getFullMessage();
				Matcher matcherCve = PATTERN_CVES.matcher(message);
				Matcher matcherCveId = PATTERN_CVE_ID.matcher(message);

				List<String> foundCves = new ArrayList<>();

				List<String> foundBugs = new ArrayList<>();
				// Matcher matcherBug = PATTERN_BUGS.matcher(message);

				List<String> foundVulns = new ArrayList<>();
				Matcher matcherVuln = PATTERN_VULN.matcher(message);

				// Search for 'CVE' commits
				if (matcherCve.find()) {
					if (!(matcherCveId.find() && !matcherCveId.group(0).contains(cveId))) {
						logger.info("Found CVE Commit " + matcherCve.group(0));
						foundCves.add(matcherCve.group(0));
					}
				}

				// Search for 'Vulnerability' commits
				else if (matcherVuln.find()) {
					logger.info("Found Vuln Commit " + matcherVuln.group(0));
					foundVulns.add(matcherVuln.group(0));
				}

				if (!foundCves.isEmpty() || !foundVulns.isEmpty()) {
					try {
						JGithubCommit githubCommit = new JGithubCommit(repoCommit.getName(), foundCves, foundBugs,
								foundVulns, repoCommit, getFilesPathsByCommit(repoCommit));
						this.fixCommits.add(githubCommit);
					} catch (IOException ex) {
						logger.error(ex.getMessage());
					}
				}
			}
		}

		return extractJGithubComits(fixCommits);

	}

	/**
	 * Obtains a files paths for a specific commit
	 * 
	 * @param commit
	 * @return
	 * @throws IOException
	 * @throws MissingObjectException
	 * @throws GitAPIException
	 */
	private List<String> getFilesPathsByCommit(RevCommit commit) throws IOException, MissingObjectException {

		List<String> paths = new ArrayList();

		RevWalk rw = new RevWalk(localRepo);
		ObjectId head = localRepo.resolve(Constants.HEAD);
		RevCommit parent = rw.parseCommit(commit.getParent(0).getId());
		DiffFormatter df = new DiffFormatter(DisabledOutputStream.INSTANCE);

		df.setRepository(localRepo);
		df.setDiffComparator(RawTextComparator.DEFAULT);
		df.setDetectRenames(true);

		List<DiffEntry> diffs = df.scan(parent.getTree(), commit.getTree());

		for (DiffEntry diff : diffs) {
			paths.add(diff.getNewPath());
		}
		return paths;
	}

	/**
	 * Generate a TreeParser from a Tree that's obtained from a given commit to
	 * allow for no inspection duplicates
	 *
	 * @return
	 * @return
	 * @param fixCommits
	 */
	private Map<Date, ArrayList<String>> extractJGithubComits(List<JGithubCommit> fixCommits) throws GitAPIException, IOException {

		Map<Date, ArrayList<String>> commits = new HashMap<>();
		ArrayList<String> commitFiles = new ArrayList<>();
		ArrayList<String> diffFiles = new ArrayList<>();

		for (JGithubCommit fixCommit : fixCommits) {

			ArrayList<String> commitData = new ArrayList<>();

			commitData.add(fixCommit.getCommit().getId().toString());
			commitData.add(fixCommit.getCommit().getFullMessage());

			commits.put(fixCommit.getCommit().getAuthorIdent().getWhen(), commitData);

			for (String CVETag : fixCommit.getFoundCves()) {
				commitFiles.addAll(saveCommitFiles(CVETag, fixCommit.getCommit()));
				diffFiles.addAll(saveDiffFiles(CVETag, fixCommit.getCommit()));
			}

			for (String VulnTag : fixCommit.getFoundVulns()) {
				commitFiles.addAll(saveCommitFiles(VulnTag, fixCommit.getCommit()));
				diffFiles.addAll(saveDiffFiles(VulnTag, fixCommit.getCommit()));
			}

            savePatchDataToCSV(commitFiles, diffFiles, fixCommit.getCommit().getFullMessage());

		}

		logger.info("Commits from repo " + projectName + " parsed successfully!");
		return commits;

	}

	/**
	 * Creates Commit files for every CVE including a patch within the output
	 * directory
	 *
	 * @param cveTag
	 * @param commit
	 * @throws MissingObjectException
	 * @throws IOException
	 * @throws GitAPIException
	 */
	private ArrayList<String> saveCommitFiles(String cveTag, RevCommit commit) {

		logger.info("Saving commit files for: " + cveTag);
		ArrayList<String> commitFilePaths = new ArrayList<>();
		RevTree tree = commit.getTree();
		TreeWalk extractObjectTree;
		// now try to find a specific file
		try (TreeWalk treeWalk = new TreeWalk(localRepo)) {

			treeWalk.addTree(tree);
			treeWalk.setRecursive(true);
			List<String> filesToSave = getFilesPathsByCommit(commit);

			// Loop through all commit files and re-write them in CVE_Patches directory
			// Within the selected output dir
			for (String path : filesToSave) {

				treeWalk.setFilter(PathFilter.create(path));
				Path p = Paths.get(path);
				String fileName = p.getFileName().toString();

				if (!treeWalk.next()) {
					System.out.println("Did not find expected file");
					break;
				}

				extractObjectTree = treeWalk;
				ObjectId objectId = extractObjectTree.getObjectId(0);
				ObjectLoader loader = localRepo.open(objectId);

				ByteArrayOutputStream os = new ByteArrayOutputStream();
				loader.copyTo(os);
				String commitName = commit.getName();

				// Folder in which the Patch commit and diff is stored
				File cveFolder = new File(localOutput + File.separator + projectName);
				cveFolder.mkdir();

				// CVE_Patches folder for all commit files
				File cvePatches = new File(cveFolder.getAbsolutePath() + File.separator + "CVE_Patches");
				cvePatches.mkdir();

				// Folder for specific CVE
				File dir = new File(cvePatches.getAbsolutePath() + File.separator + cveTag);
				dir.mkdir();

				File commitFile = new File(dir.getAbsolutePath() + File.separator + fileName);

				// Write commit contents
				try (OutputStream outputStream = new FileOutputStream(
						commitFile.getAbsolutePath())) {
					os.writeTo(outputStream);
				}

				Path commitFilePath = Paths.get(commitFile.getAbsolutePath());
				Charset charset = StandardCharsets.UTF_8;

				String commitContent = Files.readString(commitFilePath, charset);
				commitContent = commitContent.replaceAll(",", "COMMA");
				commitContent = commitContent.replaceAll("\n", "\\N");

				Files.write(commitFilePath, commitContent.getBytes(charset));

				commitFilePaths.add(commitFile.getAbsolutePath());
			}

		} catch (Exception e) {
			logger.error(e.toString());
		}

		logger.info("Commit files saved");
		return commitFilePaths;

	}

	/**
 	* Creates Diff file for every CVE including a patch within the output directory
 	*
 	* @param cveTag
 	* @param commit
 	* @throws GitAPIException
 	* @throws IOException
 	*/

 	private ArrayList<String> saveDiffFiles(String cveTag, RevCommit commit) throws GitAPIException, IOException {

		logger.info("Saving diff files for: " + cveTag);
		ArrayList<String> diffFilePaths = new ArrayList<>();
 		List<DiffEntry> diff = getDiff(commit);

		String commitName = commit.getName();

		// Folder in which the Patch commit and diff is stored
		File cveFolder = new File(localOutput + File.separator + projectName);
		cveFolder.mkdir();

		// CVE_Patches folder for all diff files
		File cvePatches = new File(cveFolder.getAbsolutePath() + File.separator + "CVE_Diffs");
		cvePatches.mkdir();

		// Folder for specific CVE
		File dir = new File(cvePatches.getAbsolutePath() + File.separator + cveTag);
		dir.mkdir();
		// Folder for specific commit containing the hash (named after commit hash)
		File commHash = new File(dir.getAbsolutePath() + File.separator + commitName);
		commHash.mkdir();

		// OutputStream outputStream = new FileOutputStream(commHash.getAbsolutePath() +
		// File.separator + "fileName.diff");
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		for (DiffEntry entry : diff) {
			try (DiffFormatter formatter = new DiffFormatter(os)) {

				formatter.setRepository(localRepo);
				formatter.format(entry);

				String aString = new String(os.toByteArray(), "UTF-8");
				String[] split = aString.split("diff --git ");

				for (int i = 1; i < split.length; i++) {
					String[] filename = split[i].split("\n", 2);

					int linelen = filename[0].length();
					String name = "";

					while (!(filename[0].charAt(linelen - 1) == '/')) {
						name = filename[0].charAt(linelen - 1) + name;
						linelen--;
					}

					String[] filecontent = split[i].split("@@\n", 2);

					File diffFile = new File(commHash + File.separator + name);

					try (Writer writer = new BufferedWriter(new OutputStreamWriter(
							new FileOutputStream(diffFile.getAbsolutePath()), StandardCharsets.UTF_8))) {
						writer.write(filecontent[1]);
					} catch (Exception ex) {
						ex.getMessage();
					}

					Path diffFilePath = Paths.get(diffFile.getAbsolutePath());
					Charset charset = StandardCharsets.UTF_8;

					String commitContent = Files.readString(diffFilePath, charset);
					commitContent = commitContent.replaceAll(",", "COMMA");
					commitContent = commitContent.replaceAll("\n", "\\N");

					Files.write(diffFilePath, commitContent.getBytes(charset));

					diffFilePaths.add(diffFile.getAbsolutePath());

				}
			}
		}

		logger.info("Diff files saved");
		return diffFilePaths;

 	}


	/**
	 * Collects a Diff from a specific commit
	 *
	 * @param commit
	 * @return
	 * @throws GitAPIException
	 * @throws IOException
	 */
	private List<DiffEntry> getDiff(RevCommit commit) throws GitAPIException, IOException {
		RevWalk rw = new RevWalk(localRepo);
		ObjectId head = localRepo.resolve(Constants.HEAD);
		RevCommit parent = rw.parseCommit(commit.getParent(0).getId());
		AbstractTreeIterator oldTreeParser = prepareTreeParser(localRepo, parent.getName());
		AbstractTreeIterator newTreeParser = prepareTreeParser(localRepo, commit.getName());

		List<DiffEntry> diff = git.diff().setOldTree(oldTreeParser).setNewTree(newTreeParser).call();
		return diff;
	}

	/**
	 * Generate a TreeParser from a Tree that's obtained from a given commit to
	 * allow for no inspection duplicates
	 *
	 * @param repository
	 * @param objectId
	 * @return
	 * @throws IOException
	 */
	private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException {

		try (RevWalk walk = new RevWalk(repository)) {
			RevCommit commit = walk.parseCommit(ObjectId.fromString(objectId));
			RevTree tree = walk.parseTree(commit.getTree().getId());

			CanonicalTreeParser treeParser = new CanonicalTreeParser();
			try (ObjectReader reader = repository.newObjectReader()) {
				treeParser.reset(reader, tree.getId());
			}

			walk.dispose();

			return treeParser;
		}
	}

	/**
	 * Saves patch data of code before and after patch to csv locally
	 * Also stores diff file contents to csv line as well
	 * @param postPatchFileLocs
	 * @param diffLocs
	 */
	private void savePatchDataToCSV(ArrayList<String> postPatchFileLocs, ArrayList<String> diffLocs, String commitMessage) throws IOException {
		logger.info("Writing to CSV");

		StringBuilder data = new StringBuilder();

		// Folder in which the Patch commit and diff is stored
		File output = new File(localOutput + File.separator + "bugFinderData.csv");
		PrintWriter writer = new PrintWriter(new FileWriter(output.getAbsolutePath(), true));

		logger.info("Saving Commit file contents...");

		data.append(cveId).append(",").append(description).append(",")
				.append(commitMessage.replaceAll(",", "COMMA").replaceAll("\n", "\\N")
						.trim()).append(",");

		for (String postPatchFileLoc : postPatchFileLocs) {
			File postPatchFile = new File(postPatchFileLoc);

			if (postPatchFile.exists()) {
				data.append(postPatchFile.getName()).append(" --> ");

				data.append(getFileContents(postPatchFile).replaceAll(",", "COMMA").trim());

				postPatchFile.delete();
			}
		}
		data.append(",");
		logger.info("Commit files saved");

		logger.info("Collecting Diff file contents...");
		for (String diffLoc : diffLocs) {
			File diffFile = new File(diffLoc);

			if (diffFile.exists()) {
				data.append(diffFile.getName()).append(" --> ");

				data.append(getFileContents(diffFile).replaceAll(",", "COMMA").trim());

				diffFile.delete();
			}
		}
		data.append("\n");

		logger.info("Diff files saved");

		writer.append(data);
        writer.close();
		logger.info("Contents Saved To CSV");

	}

	/**
	 * Extract Method used to write to csv output file for patch data
	 * @param input
	 */
	private String getFileContents(File input) {
		StringBuilder data = new StringBuilder();
		try (BufferedReader br = new BufferedReader(new FileReader(input))) {
			String line;
			while ((line = br.readLine()) != null) {
				data.append(line);
			}

		} catch (Exception e) {
			logger.error(e.toString());
		}
		return data.toString();
	}

}
